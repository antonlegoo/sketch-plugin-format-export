@import "formatter-date.cocoascript"

var doc;
var docFilename;

var docFilePath;
var docFileFolder;

var nowDate = new Date();

var onRun = function( context )
{
	doc = context.document;
	docFilename = doc.displayName();

	docFilePath = doc.fileURL().path();
	docFileFolder = ( docFilePath ) ? docFilePath.split( docFilename )[0] : null;

	var selectedLayers = context.selection;
	var selectedCount = selectedLayers.count();

	if (selectedCount == 0)
	{
        [doc showMessage:"Please select an artboard."];
	} 
	else
	{

		var sketch = context.api();

        // Ask the user to specify which folder to export to
        var folderResponse = createPanel( "Choose a folder to export to", docFileFolder );

        // If they cancelled the dialog, then we cancel as well
        if( folderResponse.responseCode == 0 ) return false;

        // Get the user's selection as the export path
        var exportPath = folderResponse.selection;


        // sketch.selectedDocument.selectedLayers.iterateWithFilter("isArtboard", function(artboard)
        // {
        //     //
        //     handleArtboard( artboard._object, nowDate, exportPath );
        // });

        // sketch.selectedDocument.selectedLayers.iterateWithFilter("isLayer", function(layer)




        // Loop thru each selected layer
        sketch.selectedDocument.selectedLayers.iterate( function(layer)
        {
            // Determine if its an artboard
            if( layer._object.class() == "MSArtboardGroup" )
            {
                // Handle the artboard
                handleArtboard( layer._object, nowDate, exportPath );
            }
            else
            {
                // Its a layer. Handle its parent arboard
                handleArtboard( layer._object.parentArtboard(), nowDate, exportPath );
            }

        });
	};

}












///////////////////////////////////////////////////////////
//	....
///////////////////////////////////////////////////////////

function handleArtboard( artboard, date, exportPath )
{
    // Store the layers affected so that we restore the original string after export
    var layersAffected = [];

	// Loop thru all layers
	var loopLayers = artboard.layers().objectEnumerator(), page;
    while ( layer = loopLayers.nextObject() )
    {
    	// If its TextLayer...
    	if( layer.class() != "MSTextLayer" ) continue;

    	// Handle it
        var originalText = layer.stringValue();
        var replaceText = replaceDateString( date, originalText );

        // Replace
    	if( replaceText ) 
        {
            // Replace
            replaceTextLayer( layer, replaceText );
        }

        // Add it as a layer affected
        layersAffected.push( { "layer": layer, "original": originalText } );
    }

    // Do export
    exportArtboard( artboard, exportPath );

    // Restore original text of all affected layers
    layersAffected.forEach( function(s)
    {
        // Restore to original
        replaceTextLayer( s.layer, s.original );
    });

};







///////////////////////////////////////////////////////////
//	....
///////////////////////////////////////////////////////////

function exportArtboard( artboard, exportPath )
{
	// For each of the artboard's exports
	artboard.exportOptionsGeneric().exportFormats().forEach( function( exportItem )
	{	
		// Create the slice
		var slice = [MSExportRequest exportRequestFromExportFormat:exportItem layer:artboard inRect:artboard.rect() useIDForName:true];

        //
        var replacedName = replaceDateString( nowDate, slice.name() );

		// Create the full path + filename for the export
		var exportFullPath = exportPath + replacedName + "." + exportItem.fileFormat();

        // Remove the "file://"" part of the path, as it causes a bug where it doesn't export
        exportFullPath = exportFullPath.replace( "file://", "" );

        // Do export
		[doc saveArtboardOrSlice:slice toFile:exportFullPath];

	});

}




///////////////////////////////////////////////////////////
//	Displays the OS file picker
//		ref: https://github.com/shakemno/sketch-replace-images/blob/master/sketch-replace-images.sketchplugin/Contents/Sketch/sketch-replace-images-settings.cocoascript
///////////////////////////////////////////////////////////


function createPanel(msg, default_path)
{
	var openPanel;

	var okButton = [[NSButton alloc] initWithFrame:NSMakeRect(0, 0, 0, 0)]

	// [okButton setTitle:"Restore default"]
	// [okButton setCOSJSTargetFunction:function(sender)
	// {
	// 	[NSApp stopModal];
	// }];
	// [okButton setBezelStyle:NSRoundedBezelStyle];

	openPanel = [NSOpenPanel openPanel]
	[openPanel setCanChooseDirectories:true]
	[openPanel setCanChooseFiles:false]
	[openPanel setCanCreateDirectories:true]
	if(default_path != null)
		[openPanel setDirectoryURL:[NSURL fileURLWithPath:default_path]]
	else
		[openPanel setDirectoryURL:[NSURL fileURLWithPath:NSHomeDirectory().stringByAppendingString("/Documents/")]]

	[openPanel setPrompt:"Choose"]
	[openPanel setMessage:msg]
	// [openPanel setAccessoryView:okButton];

	var responseCode = [openPanel runModal]
	var url = [[openPanel URL] absoluteString];

	return {"responseCode":responseCode, "selection":url}
}




///////////////////////////////////////////////////////////
//	Replaces the text of a MSTextLayer
///////////////////////////////////////////////////////////

function replaceTextLayer( textLayer, text )
{
	// Arg handling
	if( !textLayer || !text ) return;

	// Set name
	// textLayer.setName( text );

	// Set text
	[textLayer replaceTextPreservingAttributeRanges:text];
};

///////////////////////////////////////////////////////////
// 	Searches for ALL INSTANCES of date placeholders and 
//	replaces them with formatted date
///////////////////////////////////////////////////////////

function replaceDateString( date, string )
{
	// Return string
	var newString = string;
	// Test to see if do/while should continue
	var test = true;
	do
	{
		// Try to replace
		test = formatDateString( date, newString );
		// If date format was found, assign new string.. if not, do/while breaks 
		if( test ) newString = test;
	}
	while( test );

	return newString;
}